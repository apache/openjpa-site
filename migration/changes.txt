==== ./content/logo-contest.md
==== ./content/building-and-running-openbooks.md
==== ./content/release-management.md
==== ./content/jpa-2.0-iterations.md
==== ./content/enhancement-with-ant.md
==== ./content/detached.state.serialization.md
==== ./content/openjpa-2.0.0-beta.md
==== ./content/jsr-317-20081031-public-draft-tasks.md
==== ./content/get-involved.md
==== ./content/license.md
==== ./content/openjpa-2.3.x.md
==== ./content/jpa-2.1-test-coverage.md
==== ./content/sidenav-quick-links.md
==== ./content/openjpa-2.0.0.md
==== ./content/domain-model-browser.md
22c22,23
< <span class="info">
---
> <div class="info">
> 
25c26,27
< </span>
---
> 
> </div>
33c35
< ![](images/mmb.PNG)
---
> ![domain model](images/mmb.PNG)
==== ./content/jpa-specification-development.md
==== ./content/overview.md
==== ./content/fetch-statistics.md
==== ./content/troubleshoot.md
==== ./content/jest-examples.md
==== ./content/openjpa-2.0.1.md
==== ./content/openjpa-2.1.0.md
==== ./content/opentradercommunication.md
==== ./content/jconsole-datacache-plugin.md
==== ./content/powered-by.md
==== ./content/integration.md
==== ./content/jest-transaction.md
==== ./content/jpa-2.1-development-process.md
==== ./content/publishing-serp-to-maven-central-repository.md
==== ./content/query-notes.md
==== ./content/community.md
==== ./content/privacy-policy.md
==== ./content/openjpa+email.md
==== ./content/apidiscussionfollowup.md
==== ./content/openjpa-2.0.0-milestone-3.md
==== ./content/banner.md
==== ./content/update-release-text-files.md
==== ./content/openjpa-2.0.0-early-access-2.md
==== ./content/recovering-from-a-vetoed-release.md
==== ./content/openjpa-3.1.x.md
1c1
< Title:
---
> Title: OpenJPA 3.1.X
==== ./content/opentraderarchitecture.md
==== ./content/samples.md
==== ./content/jpa-2.0-development-process.md
==== ./content/downloads-nightly.md
==== ./content/openjpa-release-policy.md
==== ./content/openjpa-2.0.0-beta-3.md
==== ./content/enhancement-with-eclipse.md
65c65
< ![](images/navigator.png)
---
> ![Navigator](images/navigator.png)
67c67
< ![](images/main.png)
---
> ![Main](images/main.png)
69c69
< ![](images/targets.png)
---
> ![Targets](images/targets.png)
==== ./content/jest-representation.md
==== ./content/entity-enhancement.md
==== ./content/site-index.md
==== ./content/openjpa-development-resources.md
==== ./content/jpa-2.0-test-coverage.md
==== ./content/intro.md
==== ./content/mailing-lists.md
==== ./content/openbooks---featuring-jpa-2.0.md
==== ./content/begin-using-openjpa---the-basics.md
83c83
< <img src="images/image001.jpg"/>
---
>      ![images/image001.jpg](/images/image001.jpg)
93c93
< <img src="images/image002.jpg"/>
---
>       ![images/image002.jpg](/images/image002.jpg)
98c98
< <img src="images/image003.jpg"/>
---
>       ![images/image003.jpg](/images/image003.jpg)
104c104
< <img src="images/image001.jpg"/>
---
>       ![images/image001.jpg](/images/image001.jpg)
108c108
< <img src="images/image004.jpg"/>
---
>    ![images/image004.jpg](/images/image004.jpg)
113c113
< <img src="images/image005.jpg"/>
---
>      ![images/image005.jpg](/images/image005.jpg)
119c119
< <img src="images/image006.jpg"/>
---
>      ![images/image006.jpg](/images/image006.jpg)
123c123
< <img src="images/image007.jpg"/>
---
>      ![images/image007.jpg](/images/image007.jpg)
130c130
< <img src="images/image008.jpg"/>
---
>    ![images/image008.jpg](/images/image008.jpg)
136c136
< <img src="images/image009.jpg"/>
---
>      ![images/image009.jpg](/images/image009.jpg)
138,141c138,140
< 1. Now we will bring in the sample code. The easiest way to add the sample
< code is      to find the source provided with this tutorial and copy it to
< the src      folder under the **OpenJPATutorialWeb** folder in your project
< directory in Windows Explorer:
---
> 1. Now we will bring in the sample code. The easiest way to add the sample code is
>    to find the source provided with this tutorial and copy it to the src folder
>    under the **OpenJPATutorialWeb** folder in your project directory in Windows Explorer:
143c142
< <img src="images/image010.jpg"/>
---
>    ![images/image010.jpg](/images/image010.jpg)
145,147c144,145
<     * Now go back to Eclipse. Right-click on the **OpenJPATutorialWeb** folder
< in the Project Explorer view and select **Refresh,** or press the **F5** key on
< your keyboard. Now you will see this:
---
>    * Now go back to Eclipse. Right-click on the **OpenJPATutorialWeb** folder in the Project Explorer view
>      and select **Refresh,** or press the **F5** key on your keyboard. Now you will see this:
149c147
< <img src="images/image011.jpg"/>
---
>      ![images/image011.jpg](/images/image011.jpg)
151,152c149
<         Notice that all the source files compile without error. That is because
< Geronimo comes with OpenJPA v1.1 built in.
---
>      Notice that all the source files compile without error. That is because Geronimo comes with OpenJPA v1.1 built in.
156c153
< <img src="images/image012.jpg"/>  
---
>    ![images/image012.jpg](/images/image012.jpg)
160c157
< <img src="images/image013.jpg"/>
---
>    ![images/image013.jpg](/images/image013.jpg)
169,170c166
< 1. In Windows, open a command prompt and navigate to the Geronimo **bin**
< directory.
---
> 1. In Windows, open a command prompt and navigate to the Geronimo **bin** directory.
175c171
< <img src="images/image014.jpg"/>
---
>    ![images/image014.jpg](/images/image014.jpg)
179c175
< <img src="images/image015.jpg"/>
---
>    ![images/image015.jpg](/images/image015.jpg)
183c179
< 	<http://localhost:8080/console>  
---
>    http://localhost:8080/console
185c181
< <img src="images/image016.jpg"/>
---
>    ![images/image016.jpg](/images/image016.jpg)
189,191c185,186
< 1. You will come to the Welcome page. On the left menu, at the bottom, find
< the	 section for the Embedded DB. This is the Derby database control
< page.
---
> 1. You will come to the Welcome page. On the left menu, at the bottom, find the section
>    for the Embedded DB. This is the Derby database control page.
193c188
< <img src="images/image017.jpg"/>  
---
>    ![images/image017.jpg](/images/image017.jpg)
197,199c192,193
< 1. In the Run SQL section, in the text field labeled Create DB, type in
< **StoreSystem**. This is the name of the database that the OpenJPA sample is
< configured to transact.
---
> 1. In the Run SQL section, in the text field labeled Create DB, type in **StoreSystem**.
>    This is the name of the database that the OpenJPA sample is configured to transact.
201c195
< <img src="images/image018.jpg"/>  
---
>    ![images/image018.jpg](/images/image018.jpg)
203,204c197
< 1. Click on the **Create** button. You should now see the
< **StoreSystem** database appear in
---
> 1. Click on the **Create** button. You should now see the **StoreSystem** database appear in
207c200
< <img src="images/image019.jpg"/>  
---
>    ![images/image019.jpg](/images/image019.jpg)
228c221
< <img src="images/image020.jpg"/>  
---
>    ![images/image020.jpg](/images/image020.jpg)
230,231c223
< 1. In the      Ear Export dialog, find a convenient place to put the
< exported EAR file.
---
> 1. In the Ear Export dialog, find a convenient place to put the exported EAR file.
234c226
< <img src="images/image021.jpg"/>  
---
>    ![images/image021.jpg](/images/image021.jpg)
241c233
< <img src="images/image022.jpg"/>  
---
>    ![images/image022.jpg](/images/image022.jpg)
249c241
< <img src="images/image023.jpg"/>  
---
>    ![images/image023.jpg](/images/image023.jpg)
253c245
< <img src="images/image024.jpg"/>  
---
>    ![images/image024.jpg](/images/image024.jpg)
260c252
< <img src="images/image025.jpg"/>  
---
>      ![images/image025.jpg](/images/image025.jpg)
264c256
< <img src="images/image026.jpg"/>  
---
>    ![images/image026.jpg](/images/image026.jpg)
415c407
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;�&nbsp;
---
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
418c410
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;�&nbsp;
---
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
430c422
< <img src="images/image027.jpg"/>  
---
>   ![images/image027.jpg](/images/image027.jpg)
456,457c448
<     * **persistence-unit**: the **name** is the table name to bind. In this case
< it is	     'person'.
---
>   * **persistence-unit**: the **name** is the table name to bind. In this case it is 'person'.
459,461c450,451
<     * **property:** openjpa.jdbc.SynchronizeMappings: This tells OpenJPA to
< automatically create the table with the class definition if a table does
< not already exist.
---
>   * **property:** openjpa.jdbc.SynchronizeMappings: This tells OpenJPA to automatically create
>     the table with the class definition if a table does not already exist.
465a456
> 
480,485c471,473
<     * Note that the name, **"InventorySystem"**, is the same
< one identified in the persistence.xml.
<     * This code can be placed just before a query or transaction or they can
< be class properties.
<     * Regardless of the scope, the EntityManager and the EntityManagerFactory
< should be closed when they are no longer needed:
---
>   * Note that the name, **"InventorySystem"**, is the same one identified in the persistence.xml.
>   * This code can be placed just before a query or transaction or they can be class properties.
>   * Regardless of the scope, the EntityManager and the EntityManagerFactory should be closed when they are no longer needed:
492,501c480,486
<     * The EntityManagerFactory and EntityManager full descriptions are in the
< following OpenJPA documentation:
<         * EntityManagerFactory: <http://openjpa.apache.org/builds/latest/docs/manual/jpa_overview_emfactory.html>
<         * EntityManager: <http://openjpa.apache.org/builds/latest/docs/manual/jpa_overview_em.html>
<     
< * DB interface class. In this example, the InventoryEntityBroker class
< contains all the OpenJPA database interaction code. This is not required
< but it is a good idea for keeping the functionality componentized. For
< example, if you want to pull all of the records from the InventoryItem
< table, the code would look like this:
---
>   * The EntityManagerFactory and EntityManager full descriptions are in the following OpenJPA documentation:
>     * EntityManagerFactory: http://openjpa.apache.org/builds/latest/docs/manual/jpa_overview_emfactory.html
>     * EntityManager: http://openjpa.apache.org/builds/latest/docs/manual/jpa_overview_em.html
>     
> * DB interface class. In this example, the InventoryEntityBroker class contains all the OpenJPA database interaction code.
>   This is not required but it is a good idea for keeping the functionality componentized. For example, if you want
>   to pull all of the records from the InventoryItem table, the code would look like this:
525,528c510,511
<     * Notice that the Query is not standard SQL. It is actually JPQL, which is
< a specialized form of query language specifically designed for JPA.
<         * In the JPQL statement, "<font color="#2a00ff">SELECT item FROM InventoryItem
< item</font>", notice that InventoryItem has the same case as the class
---
>   * Notice that the Query is not standard SQL. It is actually JPQL, which is a specialized form of query language specifically designed for JPA.
>     * In the JPQL statement, "<font color="#2a00ff">SELECT item FROM InventoryItem item</font>", notice that InventoryItem has the same case as the class
530,531c513
<         * JPQL uses java objects in the query and not the database table names.
< The statement identifies the variable for InventoryItem as
---
>     * JPQL uses java objects in the query and not the database table names. The statement identifies the variable for InventoryItem as
533,536c515,516
<         * JPQL provides an object oriented query language that is independent of
< the database being queried.&nbsp; So, regardless of which database being
< used, the JPQL does not change.&nbsp; The JPA runtime takes care of doing
< the translation from the object world to the desired relational database.
---
>     * JPQL provides an object oriented query language that is independent of the database being queried.&nbsp; So, regardless of which database being
>       used, the JPQL does not change.&nbsp; The JPA runtime takes care of doing the translation from the object world to the desired relational database.
539,542c519,520
< * Also in the InventoryEntityBroker is code to add entries the database
< tables. Since you did not create a table for InventoryItem in the
< StoreSystem database in Derby, OpenJPA 2.0 will create the table the first
< time an _"add"_ is attempted.
---
> * Also in the InventoryEntityBroker is code to add entries the database tables. Since you did not create a table for InventoryItem in the
>   StoreSystem database in Derby, OpenJPA 2.0 will create the table the first time an _"add"_ is attempted.
575,576c553
<         * When this is executed the first time it will use the annotations to
< create the Person table, then OpenJPA 2.0 will populate it with the
---
>     * When this is executed the first time it will use the annotations to create the Person table, then OpenJPA 2.0 will populate it with the
578,579c555
<         * Note the use of the getTransaction() method to start an update and then
< to commit it. The concept is the same as in any database transaction
---
>     * Note the use of the getTransaction() method to start an update and then to commit it. The concept is the same as in any database transaction
581,584c557,558
<         * Also note that while the getAllItems() function requires a JPQL SELECT
< query, the update type actions have APIs.
<         * Take a look in the InventoryEntityBroker code at the addItem(),
< updateItem() and deleteItem() functions and note the simplicity of these
---
>     * Also note that while the getAllItems() function requires a JPQL SELECT query, the update type actions have APIs.
>     * Take a look in the InventoryEntityBroker code at the addItem(), updateItem() and deleteItem() functions and note the simplicity of these
589,590c563
< and many to many. OpenJPA provides annotations to identify the related
< fields.
---
>   and many to many. OpenJPA provides annotations to identify the related fields.
607,608c580
<      * This object has a one-to-many relationship with
< targetEntity=tutorial.InventoryItem.class. Meaning that one
---
>   * This object has a one-to-many relationship with targetEntity=tutorial.InventoryItem.class. Meaning that one
610,613c582,583
<      * The property of InventoryItem that specifies the
< InventoryCategory it is associated with is mappedBy="category". In other
< words, InventoryItem has a class property of type InventoryCategory named
< "category".\\  Now open the source file,
---
>   * The property of InventoryItem that specifies the InventoryCategory it is associated with is mappedBy="category". In other
>     words, InventoryItem has a class property of type InventoryCategory named "category".  Now open the source file,
628,629c598
<         * This object has a many-to-one relationship with the InventoryCategory
< object. Meaning that there many InventoryItems can reference the same
---
>     * This object has a many-to-one relationship with the InventoryCategory object. Meaning that there many InventoryItems can reference the same
631d599
< 
634,635c602
< reference by the attribute:
< name=<font color="##2a00ff">"CAT_ID"</font>.
---
>       reference by the attribute: name=<font color="##2a00ff">"CAT_ID"</font>.
==== ./content/bean-validation-primer.md
==== ./content/releasing-openjpa-1.0.x-or-1.1.x-(old-scp-steps).md
==== ./content/openjpa-logo-contest---round-1.md
==== ./content/faq.md
==== ./content/openjpa-confluence-user-groups.md
==== ./content/tips-n-techniques.md
==== ./content/quick-start.md
==== ./content/releasing-openjpa-1.2.x-(old-scp-steps).md
==== ./content/openjpa-up-close-and-personal.md
==== ./content/obtaining.md
==== ./content/jpa-2.1-roadmap.md
==== ./content/testing.md
==== ./content/openjpa-3.0.x.md
==== ./content/build-and-runtime-dependencies.md
4c4
< <a name="OpenJPABuildandRuntimeDependencies></a>
---
> <a name="OpenJPABuildandRuntimeDependencies"></a>
==== ./content/beginners-performance-guide.md
==== ./content/openjpa-2.4.x.md
==== ./content/openjpa-2.0.0-beta-2.md
==== ./content/getting-started.md
==== ./content/buildbot.tips.n.techniques.md
==== ./content/openjpa-logo-contest---round-2.md
==== ./content/opentraderserver.md
==== ./content/whither-openjpa.md
==== ./content/coding-standards.md
==== ./content/thanks.md
==== ./content/writing-test-cases-for-openjpa.md
==== ./content/development-process.md
==== ./content/running-the-sun-tck-for-jpa.md
==== ./content/jest-syntax.md
==== ./content/sidenav-community.md
==== ./content/found-a-bug.md
==== ./content/using-criteria-api-in-daytrader.md
140c140
<         wsadmin -f <location ofdaytrader_singleServer.py> <script options>
---
>         wsadmin -f <location ofdaytrader_singleServer.py> ${script options}
148c148
< 1. On a web browser, go to http://localhost:<application port>/daytrader/(The default application port is 9080. But, you may have a different one if you created a new profile.)
---
> 1. On a web browser, go to http://localhost:<application-port>/daytrader/ (The default application port is 9080. But, you may have a different one if you created a new profile.)
==== ./content/embeddable-samples.md
==== ./content/findbugs-presentation-notes.md
==== ./content/jpa-2.0-presentations.md
==== ./content/index.md
==== ./content/related-projects.md
==== ./content/enhancement-with-maven.md
==== ./content/opentrader.md
==== ./content/openjpaeclipseinstallation.md
7c7,8
< <span class="info">
---
> <div class="info">
> 
9c10,12
<     the current Update Site of the OpenJPA Eclipse Tooling. (It will probably still change.)</span>
---
> the current Update Site of the OpenJPA Eclipse Tooling. (It will probably still change.)
> 
> </div>
==== ./content/runtime-enhancement.md
==== ./content/apply-an-eclipse-patch.md
==== ./content/opentraderbuild.md
==== ./content/openjpa-logo-contest---run-off.md
==== ./content/opentraderdeploy.md
==== ./content/opentraderenvironment.md
==== ./content/2.1-roadmap.md
==== ./content/jpa-2.0-tasks.md
==== ./content/jpa-2.1-tasks.md
==== ./content/sidenav-overview.md
==== ./content/documentation.md
==== ./content/sidenav-development.md
==== ./content/release-artifact-locations.md
==== ./content/source-code.md
==== ./content/running-openjpa-examples.md
==== ./content/architecture-notes.md
==== ./content/jpa-m2-demo.md
==== ./content/release-setup.md
==== ./content/opentraderclient.md
==== ./content/consumers.md
==== ./content/downloads.md
==== ./content/openjpaeclipsetoolingdevandbuild.md
==== ./content/apache-nexus-release-process-(1.2.x-2.1.x).md
==== ./content/websphere-application-server.md
==== ./content/jpa-2.0-roadmap.md
==== ./content/openjpa-2.2.0.md
==== ./content/development.md
==== ./content/openjpaeclipseenhancementbuilder.md
==== ./content/jest-usage.md
==== ./content/automated-builds.md
==== ./content/migration-tool.md
==== ./content/verifying-release-signatures.md
==== ./content/building.md
==== ./content/performance-guide.md
==== ./content/committers.md
==== ./content/tools.md
==== ./content/sampletemplate.md
==== ./README.md
==== ./migration/README.md
