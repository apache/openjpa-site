<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_43) on Tue Apr 16 17:05:04 CDT 2013 -->
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<TITLE>
Compatibility (OpenJPA Parent POM 2.2.2 API)
</TITLE>

<META NAME="date" CONTENT="2013-04-16">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Compatibility (OpenJPA Parent POM 2.2.2 API)";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Compatibility.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/openjpa/conf/CallbackOptions.html" title="class in org.apache.openjpa.conf"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/openjpa/conf/DetachOptions.html" title="class in org.apache.openjpa.conf"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/apache/openjpa/conf/Compatibility.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Compatibility.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.apache.openjpa.conf</FONT>
<BR>
Class Compatibility</H2>
<PRE>
<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">java.lang.Object</A>
  <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>org.apache.openjpa.conf.Compatibility</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Compatibility</B><DT>extends <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></DL>
</PRE>

<P>
Struct encompassing backwards-compatibility options.
<P>

<P>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_EXTENDED">JPQL_EXTENDED</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Allow non-compliant extensions of JPQL.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_STRICT">JPQL_STRICT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If a JPQL statement is not compliant with the JPA specification,
 fail to parse it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_WARN">JPQL_WARN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If a JPQL statement is not compliant with the JPA specification,
 warn the first time that statement is parsed.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#Compatibility()">Compatibility</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getAutoOff()">getAutoOff</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to turn collection/map tracing off in case of more number of modifications.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getCascadeWithDetach()">getCascadeWithDetach</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether openjpa will always cascade on detach, regardless of the
 cascade setting.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getCheckDatabaseForCascadePersistToDetachedEntity()">getCheckDatabaseForCascadePersistToDetachedEntity</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getCloseOnManagedCommit()">getCloseOnManagedCommit</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to close the broker when the managed transaction commits.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getConvertPositionalParametersToNamed()">getConvertPositionalParametersToNamed</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getCopyObjectIds()">getCopyObjectIds</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to copy identity objects before returning them to client code.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getCopyOnDetach()">getCopyOnDetach</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Affirms if detached entities are copy of the managed instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getFilterPCRegistryClasses()">getFilterPCRegistryClasses</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getFlushBeforeDetach()">getFlushBeforeDetach</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should flush changes before detaching or serializing an
 entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getIgnoreDetachedStateFieldForProxySerialization()">getIgnoreDetachedStateFieldForProxySerialization</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should ignore the DetachedStateField value when
 determining if our Proxy classes should be removed during serialization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getJPQL()">getJPQL</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether or not JPQL extensions are allowed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getMetaFactoriesAreStrict()">getMetaFactoriesAreStrict</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether the MetaDataFactory and MappingFactory should be set to strict mode.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getNonOptimisticVersionCheck()">getNonOptimisticVersionCheck</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether or not to perform a version check on instances being updated
 in a datastore transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getOverrideContextClassloader()">getOverrideContextClassloader</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to temporally override the thread's Context Classloader when processing
 ORM XML documents to avoid deadlock potential with certain Classloader hierarchy
 configurations.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getParseAnnotationsForQueryMode()">getParseAnnotationsForQueryMode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA will scan every persistent class in an XML mapping file for annotations prior to executing a 
 query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getPrivatePersistentProperties()">getPrivatePersistentProperties</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows private, non-transient properties to be 
 persistent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getQuotedNumbersInQueries()">getQuotedNumbersInQueries</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to interpret quoted numbers in query strings as numbers.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getReloadOnDetach()">getReloadOnDetach</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should attempt to load fields when the DetachState
 option is set to loaded.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getResetFlushFlagForCascadePersist()">getResetFlushFlagForCascadePersist</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another 
 Entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getStoreMapCollectionInEntityAsBlob()">getStoreMapCollectionInEntityAsBlob</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether if map and collection in entity are stored as blob.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getStrictIdentityValues()">getStrictIdentityValues</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to require exact identity value types when creating object
 ids from a class and value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getSuperclassDiscriminatorStrategyByDefault()">getSuperclassDiscriminatorStrategyByDefault</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to add class criteria for super class discreminator strategy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getUseJPA2DefaultOrderColumnName()">getUseJPA2DefaultOrderColumnName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should use the new default order column name defined
 by JPA 2.0: name; "_"; "ORDER" or the pre-JPA 2.0 default name "ordr".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getUseListAttributeForArrays()">getUseListAttributeForArrays</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getValidateFalseReturnsHollow()">getValidateFalseReturnsHollow</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to return hollow instances to broker lookups with a
 <code>validate</code> parameter of false.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#getValidateTrueChecksStore()">getValidateTrueChecksStore</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to check the datastore for the existence of a nontransactional
 cached object in broker lookups with a <code>validate</code> parameter
 of true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#isAbstractMappingUniDirectional()">isAbstractMappingUniDirectional</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#isNonDefaultMappingAllowed()">isNonDefaultMappingAllowed</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows non-default entity relationship mapping.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#isSingletonLifecycleEventManager()">isSingletonLifecycleEventManager</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if life cycle event manager is a singleton configuration.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setAbstractMappingUniDirectional(boolean)">setAbstractMappingUniDirectional</A></B>(boolean&nbsp;isAbstractMappingUniDirectional)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setAutoOff(boolean)">setAutoOff</A></B>(boolean&nbsp;autoOff)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to turn collection/map tracing off in case of more number of modifications.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setCascadeWithDetach(boolean)">setCascadeWithDetach</A></B>(boolean&nbsp;cascadeWithDetach)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether openjpa should always cascade on detach, regardless of the
 cascade setting.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setCheckDatabaseForCascadePersistToDetachedEntity(boolean)">setCheckDatabaseForCascadePersistToDetachedEntity</A></B>(boolean&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setCloseOnManagedCommit(boolean)">setCloseOnManagedCommit</A></B>(boolean&nbsp;close)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to close the broker when the managed transaction commits.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setConvertPositionalParametersToNamed(boolean)">setConvertPositionalParametersToNamed</A></B>(boolean&nbsp;c)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setCopyObjectIds(boolean)">setCopyObjectIds</A></B>(boolean&nbsp;copy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to copy identity objects before returning them to client code.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setCopyOnDetach(boolean)">setCopyOnDetach</A></B>(boolean&nbsp;copyOnDetach)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets if detached entities are copy of the managed instances.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setFilterPCRegistryClasses(boolean)">setFilterPCRegistryClasses</A></B>(boolean&nbsp;bool)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setFlushBeforeDetach(boolean)">setFlushBeforeDetach</A></B>(boolean&nbsp;beforeDetach)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should flush changes before detaching or serializing an
 entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setIgnoreDetachedStateFieldForProxySerialization(boolean)">setIgnoreDetachedStateFieldForProxySerialization</A></B>(boolean&nbsp;ignoreDSF)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should ignore the DetachedStateField value when
 determining if our Proxy classes should be removed during serialization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setJPQL(java.lang.String)">setJPQL</A></B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;jpql)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether or not JPQL extensions are allowed.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setMetaFactoriesAreStrict(boolean)">setMetaFactoriesAreStrict</A></B>(boolean&nbsp;metaFactoriesAreStrict)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set whether MetaDataFactories and MappingFactories will be strictly separate.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setNonDefaultMappingAllowed(boolean)">setNonDefaultMappingAllowed</A></B>(boolean&nbsp;isNonDefaultMappingAllowed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows non-default entity relationship mapping.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setNonOptimisticVersionCheck(boolean)">setNonOptimisticVersionCheck</A></B>(boolean&nbsp;nonOptimisticVersionCheck)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether or not to perform a version check on instances being updated
 in a datastore transaction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setOverrideContextClassloader(boolean)">setOverrideContextClassloader</A></B>(boolean&nbsp;overrideContextClassloader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to temporally override the thread's Context Classloader when processing
 ORM XML documents to avoid deadlock potential with certain Classloader hierarchy
 configurations.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setParseAnnotationsForQueryMode(boolean)">setParseAnnotationsForQueryMode</A></B>(boolean&nbsp;parseAnnotationsForQueryMode)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA will scan every persistent class in an XML mapping file for annotations prior to executing a 
 query.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setPrivatePersistentProperties(boolean)">setPrivatePersistentProperties</A></B>(boolean&nbsp;privateProps)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA allows private, non-transient properties to be 
 persistent.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setQuotedNumbersInQueries(boolean)">setQuotedNumbersInQueries</A></B>(boolean&nbsp;quotedNumbers)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to interpret quoted numbers in query strings as numbers.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setReloadOnDetach(boolean)">setReloadOnDetach</A></B>(boolean&nbsp;reloadOnDetach)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should attempt to load fields when the DetachState
 option is set to loaded.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setResetFlushFlagForCascadePersist(boolean)">setResetFlushFlagForCascadePersist</A></B>(boolean&nbsp;b)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another 
 Entity.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setSingletonLifecycleEventManager(boolean)">setSingletonLifecycleEventManager</A></B>(boolean&nbsp;singleton)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This property set whether each EntityManager has its own life cycle event manager.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setStoreMapCollectionInEntityAsBlob(boolean)">setStoreMapCollectionInEntityAsBlob</A></B>(boolean&nbsp;storeAsBlob)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether if map and collection in entity are stored as blob.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setStrictIdentityValues(boolean)">setStrictIdentityValues</A></B>(boolean&nbsp;strictVals)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to require exact identity value types when creating object
 ids from a class and value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setSuperclassDiscriminatorStrategyByDefault(boolean)">setSuperclassDiscriminatorStrategyByDefault</A></B>(boolean&nbsp;superclassDiscriminatorStrategyByDefault)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to add class criteria for super class discreminator strategy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setUseJPA2DefaultOrderColumnName(boolean)">setUseJPA2DefaultOrderColumnName</A></B>(boolean&nbsp;useJPA2Name)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether OpenJPA should use the new default order column name defined
 by JPA 2.0: name; "_"; "ORDER" or the pre-JPA 2.0 default name "ordr".</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setUseListAttributeForArrays(boolean)">setUseListAttributeForArrays</A></B>(boolean&nbsp;useListAttribute)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setValidateFalseReturnsHollow(boolean)">setValidateFalseReturnsHollow</A></B>(boolean&nbsp;hollow)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to return hollow instances to broker lookups with a
 <code>validate</code> parameter of false.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#setValidateTrueChecksStore(boolean)">setValidateTrueChecksStore</A></B>(boolean&nbsp;check)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether to check the datastore for the existence of a nontransactional
 cached object in broker lookups with a <code>validate</code> parameter
 of true.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang">Object</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()" title="class or interface in java.lang">clone</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="class or interface in java.lang">equals</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()" title="class or interface in java.lang">finalize</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()" title="class or interface in java.lang">getClass</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()" title="class or interface in java.lang">hashCode</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()" title="class or interface in java.lang">notify</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()" title="class or interface in java.lang">notifyAll</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()" title="class or interface in java.lang">toString</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()" title="class or interface in java.lang">wait</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)" title="class or interface in java.lang">wait</A>, <A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)" title="class or interface in java.lang">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="JPQL_STRICT"><!-- --></A><H3>
JPQL_STRICT</H3>
<PRE>
public static final int <B>JPQL_STRICT</B></PRE>
<DL>
<DD>If a JPQL statement is not compliant with the JPA specification,
 fail to parse it.
<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#org.apache.openjpa.conf.Compatibility.JPQL_STRICT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="JPQL_WARN"><!-- --></A><H3>
JPQL_WARN</H3>
<PRE>
public static final int <B>JPQL_WARN</B></PRE>
<DL>
<DD>If a JPQL statement is not compliant with the JPA specification,
 warn the first time that statement is parsed.
<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#org.apache.openjpa.conf.Compatibility.JPQL_WARN">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="JPQL_EXTENDED"><!-- --></A><H3>
JPQL_EXTENDED</H3>
<PRE>
public static final int <B>JPQL_EXTENDED</B></PRE>
<DL>
<DD>Allow non-compliant extensions of JPQL.
<P>
<DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#org.apache.openjpa.conf.Compatibility.JPQL_EXTENDED">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Compatibility()"><!-- --></A><H3>
Compatibility</H3>
<PRE>
public <B>Compatibility</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getStrictIdentityValues()"><!-- --></A><H3>
getStrictIdentityValues</H3>
<PRE>
public boolean <B>getStrictIdentityValues</B>()</PRE>
<DL>
<DD>Whether to require exact identity value types when creating object
 ids from a class and value. Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setStrictIdentityValues(boolean)"><!-- --></A><H3>
setStrictIdentityValues</H3>
<PRE>
public void <B>setStrictIdentityValues</B>(boolean&nbsp;strictVals)</PRE>
<DL>
<DD>Whether to require exact identity value types when creating object
 ids from a class and value. Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAutoOff()"><!-- --></A><H3>
getAutoOff</H3>
<PRE>
public boolean <B>getAutoOff</B>()</PRE>
<DL>
<DD>Whether to turn collection/map tracing off in case of more number of modifications.
 Defaults to true.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAutoOff(boolean)"><!-- --></A><H3>
setAutoOff</H3>
<PRE>
public void <B>setAutoOff</B>(boolean&nbsp;autoOff)</PRE>
<DL>
<DD>Whether to turn collection/map tracing off in case of more number of modifications.
 Defaults to true.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getSuperclassDiscriminatorStrategyByDefault()"><!-- --></A><H3>
getSuperclassDiscriminatorStrategyByDefault</H3>
<PRE>
public boolean <B>getSuperclassDiscriminatorStrategyByDefault</B>()</PRE>
<DL>
<DD>Whether to add class criteria for super class discreminator strategy.
 Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSuperclassDiscriminatorStrategyByDefault(boolean)"><!-- --></A><H3>
setSuperclassDiscriminatorStrategyByDefault</H3>
<PRE>
public void <B>setSuperclassDiscriminatorStrategyByDefault</B>(boolean&nbsp;superclassDiscriminatorStrategyByDefault)</PRE>
<DL>
<DD>Whether to add class criteria for super class discreminator strategy.
 Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getQuotedNumbersInQueries()"><!-- --></A><H3>
getQuotedNumbersInQueries</H3>
<PRE>
public boolean <B>getQuotedNumbersInQueries</B>()</PRE>
<DL>
<DD>Whether to interpret quoted numbers in query strings as numbers.
 OpenJPA versions 0.3.1 and prior treated them as numbers; more recent
 versions treat them as strings.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setQuotedNumbersInQueries(boolean)"><!-- --></A><H3>
setQuotedNumbersInQueries</H3>
<PRE>
public void <B>setQuotedNumbersInQueries</B>(boolean&nbsp;quotedNumbers)</PRE>
<DL>
<DD>Whether to interpret quoted numbers in query strings as numbers.
 OpenJPA versions 0.3.1 and prior treated them as numbers; more recent
 versions treat them as strings.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getValidateFalseReturnsHollow()"><!-- --></A><H3>
getValidateFalseReturnsHollow</H3>
<PRE>
public boolean <B>getValidateFalseReturnsHollow</B>()</PRE>
<DL>
<DD>Whether to return hollow instances to broker lookups with a
 <code>validate</code> parameter of false. OpenJPA versions prior to
 0.4.0 did not return hollow instances without special configuration
 (the <code>ObjectLookupMode</code>). Beginning with 0.4.0, hollow
 objects are the default.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setValidateFalseReturnsHollow(boolean)"><!-- --></A><H3>
setValidateFalseReturnsHollow</H3>
<PRE>
public void <B>setValidateFalseReturnsHollow</B>(boolean&nbsp;hollow)</PRE>
<DL>
<DD>Whether to return hollow instances to broker lookups with a
 <code>validate</code> parameter of false. OpenJPA versions prior to
 0.4.0 did not return hollow instances without special configuration
 (the <code>ObjectLookupMode</code>). Beginning with 0.4.0, hollow
 objects are the default.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getValidateTrueChecksStore()"><!-- --></A><H3>
getValidateTrueChecksStore</H3>
<PRE>
public boolean <B>getValidateTrueChecksStore</B>()</PRE>
<DL>
<DD>Whether to check the datastore for the existence of a nontransactional
 cached object in broker lookups with a <code>validate</code> parameter
 of true. OpenJPA versions prior to 0.4.0 checked the datastore.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setValidateTrueChecksStore(boolean)"><!-- --></A><H3>
setValidateTrueChecksStore</H3>
<PRE>
public void <B>setValidateTrueChecksStore</B>(boolean&nbsp;check)</PRE>
<DL>
<DD>Whether to check the datastore for the existence of a nontransactional
 cached object in broker lookups with a <code>validate</code> parameter
 of true. OpenJPA versions prior to 0.4.0 checked the datastore.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCopyObjectIds()"><!-- --></A><H3>
getCopyObjectIds</H3>
<PRE>
public boolean <B>getCopyObjectIds</B>()</PRE>
<DL>
<DD>Whether to copy identity objects before returning them to client code.
 Versions of OpenJPA prior to 0.3.0 always copied identity objects. Also,
 you should configure OpenJPA to copy identity objects if you mutate them
 after use.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCopyObjectIds(boolean)"><!-- --></A><H3>
setCopyObjectIds</H3>
<PRE>
public void <B>setCopyObjectIds</B>(boolean&nbsp;copy)</PRE>
<DL>
<DD>Whether to copy identity objects before returning them to client code.
 Versions of OpenJPA prior to 0.3.0 always copied identity objects. Also,
 you should configure OpenJPA to copy identity objects if you mutate them
 after use.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCloseOnManagedCommit()"><!-- --></A><H3>
getCloseOnManagedCommit</H3>
<PRE>
public boolean <B>getCloseOnManagedCommit</B>()</PRE>
<DL>
<DD>Whether to close the broker when the managed transaction commits.
 Versions of OpenJPA prior to 0.3.0 did not close the broker.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCloseOnManagedCommit(boolean)"><!-- --></A><H3>
setCloseOnManagedCommit</H3>
<PRE>
public void <B>setCloseOnManagedCommit</B>(boolean&nbsp;close)</PRE>
<DL>
<DD>Whether to close the broker when the managed transaction commits.
 Versions of OpenJPA prior to 0.3.0 did not close the broker.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setNonOptimisticVersionCheck(boolean)"><!-- --></A><H3>
setNonOptimisticVersionCheck</H3>
<PRE>
public void <B>setNonOptimisticVersionCheck</B>(boolean&nbsp;nonOptimisticVersionCheck)</PRE>
<DL>
<DD>Whether or not to perform a version check on instances being updated
 in a datastore transaction. Version of OpenJPA prior to 0.4.1 always
 forced a version check.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNonOptimisticVersionCheck()"><!-- --></A><H3>
getNonOptimisticVersionCheck</H3>
<PRE>
public boolean <B>getNonOptimisticVersionCheck</B>()</PRE>
<DL>
<DD>Whether or not to perform a version check on instances being updated
 in a datastore transaction. Version of OpenJPA prior to 0.4.1 always
 forced a version check.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getJPQL()"><!-- --></A><H3>
getJPQL</H3>
<PRE>
public int <B>getJPQL</B>()</PRE>
<DL>
<DD>Whether or not JPQL extensions are allowed. Defaults to
 <A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_STRICT"><CODE>JPQL_STRICT</CODE></A>.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_WARN"><CODE>JPQL_WARN</CODE></A>, 
<A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_STRICT"><CODE>JPQL_STRICT</CODE></A>, 
<A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_EXTENDED"><CODE>JPQL_EXTENDED</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setJPQL(java.lang.String)"><!-- --></A><H3>
setJPQL</H3>
<PRE>
public void <B>setJPQL</B>(<A HREF="http://download.oracle.com/javase/6/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang">String</A>&nbsp;jpql)</PRE>
<DL>
<DD>Whether or not JPQL extensions are allowed. Possible values: "warn",
 "strict", "extended".
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
<DT><B>See Also:</B><DD><A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_WARN"><CODE>JPQL_WARN</CODE></A>, 
<A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_STRICT"><CODE>JPQL_STRICT</CODE></A>, 
<A HREF="../../../../org/apache/openjpa/conf/Compatibility.html#JPQL_EXTENDED"><CODE>JPQL_EXTENDED</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="getStoreMapCollectionInEntityAsBlob()"><!-- --></A><H3>
getStoreMapCollectionInEntityAsBlob</H3>
<PRE>
public boolean <B>getStoreMapCollectionInEntityAsBlob</B>()</PRE>
<DL>
<DD>Whether if map and collection in entity are stored as blob.
 Defaults to <code>false</code>.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setStoreMapCollectionInEntityAsBlob(boolean)"><!-- --></A><H3>
setStoreMapCollectionInEntityAsBlob</H3>
<PRE>
public void <B>setStoreMapCollectionInEntityAsBlob</B>(boolean&nbsp;storeAsBlob)</PRE>
<DL>
<DD>Whether if map and collection in entity are stored as blob.
 Defaults to <code>false</code>.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>1.1.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getFlushBeforeDetach()"><!-- --></A><H3>
getFlushBeforeDetach</H3>
<PRE>
public boolean <B>getFlushBeforeDetach</B>()</PRE>
<DL>
<DD>Whether OpenJPA should flush changes before detaching or serializing an
 entity. In JPA this is usually false, but other persistence frameworks
 (ie JDO) may expect it to be true.
 <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if changes should be flushed, otherwise false.<DT><B>Since:</B></DT>
  <DD>1.0.3, 1.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setIgnoreDetachedStateFieldForProxySerialization(boolean)"><!-- --></A><H3>
setIgnoreDetachedStateFieldForProxySerialization</H3>
<PRE>
public void <B>setIgnoreDetachedStateFieldForProxySerialization</B>(boolean&nbsp;ignoreDSF)</PRE>
<DL>
<DD>Whether OpenJPA should ignore the DetachedStateField value when
 determining if our Proxy classes should be removed during serialization.
 <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the
 build time $proxy classes will not be removed.
 <P>Prior to version 2.0.0, the DetachedStateFiled was not used and
 the $proxy classes were not being removed during serialization after
 the Persistence context was cleared.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ignoreDSF</CODE> - if true the old Proxy serialization behavior will be used.<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getIgnoreDetachedStateFieldForProxySerialization()"><!-- --></A><H3>
getIgnoreDetachedStateFieldForProxySerialization</H3>
<PRE>
public boolean <B>getIgnoreDetachedStateFieldForProxySerialization</B>()</PRE>
<DL>
<DD>Whether OpenJPA should ignore the DetachedStateField value when
 determining if our Proxy classes should be removed during serialization.
 <P>Starting with version 2.0.0, when the DetachedStateFiled==true, the
 build time $proxy classes will not be removed.
 <P>Prior to version 2.0.0, the DetachedStateFiled was not used and
 the $proxy classes were not being removed during serialization after
 the Persistence context was cleared.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if the old Proxy serialization will be used, otherwise false.<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getConvertPositionalParametersToNamed()"><!-- --></A><H3>
getConvertPositionalParametersToNamed</H3>
<PRE>
public boolean <B>getConvertPositionalParametersToNamed</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setConvertPositionalParametersToNamed(boolean)"><!-- --></A><H3>
setConvertPositionalParametersToNamed</H3>
<PRE>
public void <B>setConvertPositionalParametersToNamed</B>(boolean&nbsp;c)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFlushBeforeDetach(boolean)"><!-- --></A><H3>
setFlushBeforeDetach</H3>
<PRE>
public void <B>setFlushBeforeDetach</B>(boolean&nbsp;beforeDetach)</PRE>
<DL>
<DD>Whether OpenJPA should flush changes before detaching or serializing an
 entity. In JPA this is usually false, but other persistence frameworks
 (ie JDO) may expect it to be true.
 <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>beforeDetach</CODE> - if true changes will be flushed before detaching or 
 serializing an entity.<DT><B>Since:</B></DT>
  <DD>1.0.3, 1.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCopyOnDetach()"><!-- --></A><H3>
getCopyOnDetach</H3>
<PRE>
public boolean <B>getCopyOnDetach</B>()</PRE>
<DL>
<DD>Affirms if detached entities are copy of the managed instances.
 Before this option is introduced, detached entities were by default 
 copies of the managed entities unless the entire cache is detached, only 
 then the detachment was in-place.
 This option changes the default behavior such that detachment is now
 in-place by default. To emulate the previous copy-on-detach behavior
 set this option to true.  
 
 If the entire cache is being detached (when the persistence context is
 closed, for example), the detachement
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCopyOnDetach(boolean)"><!-- --></A><H3>
setCopyOnDetach</H3>
<PRE>
public void <B>setCopyOnDetach</B>(boolean&nbsp;copyOnDetach)</PRE>
<DL>
<DD>Sets if detached entities are copy of the managed instances.
 Before this option is introduced, detached entities were by default 
 copies of the managed entities unless the entire cache is detached, only 
 then the detachment was in-place.
 This option changes the default behavior such that detachment is now
 in-place by default. To emulate the previous copy-on-detach behavior
 set this option to true.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCascadeWithDetach()"><!-- --></A><H3>
getCascadeWithDetach</H3>
<PRE>
public boolean <B>getCascadeWithDetach</B>()</PRE>
<DL>
<DD>Whether openjpa will always cascade on detach, regardless of the
 cascade setting.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if cascade will always occur, false if cascade will only
 occur if it is specified in metadata<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCascadeWithDetach(boolean)"><!-- --></A><H3>
setCascadeWithDetach</H3>
<PRE>
public void <B>setCascadeWithDetach</B>(boolean&nbsp;cascadeWithDetach)</PRE>
<DL>
<DD>Whether openjpa should always cascade on detach, regardless of the
 cascade setting.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cascadeWithDetach</CODE> - true if cascade should always occur, false if
 it should only occur if specified in metadata<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getUseJPA2DefaultOrderColumnName()"><!-- --></A><H3>
getUseJPA2DefaultOrderColumnName</H3>
<PRE>
public boolean <B>getUseJPA2DefaultOrderColumnName</B>()</PRE>
<DL>
<DD>Whether OpenJPA should use the new default order column name defined
 by JPA 2.0: name; "_"; "ORDER" or the pre-JPA 2.0 default name "ordr".
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if the JPA2 default name should be used<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setUseJPA2DefaultOrderColumnName(boolean)"><!-- --></A><H3>
setUseJPA2DefaultOrderColumnName</H3>
<PRE>
public void <B>setUseJPA2DefaultOrderColumnName</B>(boolean&nbsp;useJPA2Name)</PRE>
<DL>
<DD>Whether OpenJPA should use the new default order column name defined
 by JPA 2.0: name; "_"; "ORDER" or the pre-JPA 2.0 default name "ordr".
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>useJPA2</CODE> - true if the JPA 2.0 default name should be used.  false if
 the 1.x name should be used.<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getPrivatePersistentProperties()"><!-- --></A><H3>
getPrivatePersistentProperties</H3>
<PRE>
public boolean <B>getPrivatePersistentProperties</B>()</PRE>
<DL>
<DD>Whether OpenJPA allows private, non-transient properties to be 
 persistent.  Prior to OpenJPA 2.0, if property access was used,
 private properties were considered persistent. This is contrary to the
 JPA specification, which states that persistent properties must be
 public or protected.  The default value is false.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if non-transient private properties should be persistent<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setPrivatePersistentProperties(boolean)"><!-- --></A><H3>
setPrivatePersistentProperties</H3>
<PRE>
public void <B>setPrivatePersistentProperties</B>(boolean&nbsp;privateProps)</PRE>
<DL>
<DD>Whether OpenJPA allows private, non-transient properties to be 
 persistent.  Prior to OpenJPA 2.0, if property access was used,
 private properties were considered persistent. This is contrary to the
 JPA specification, which states that persistent properties must be
 public or protected.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>privateProps</CODE> - true if non-transient private properties 
        should be persistent<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setAbstractMappingUniDirectional(boolean)"><!-- --></A><H3>
setAbstractMappingUniDirectional</H3>
<PRE>
public void <B>setAbstractMappingUniDirectional</B>(boolean&nbsp;isAbstractMappingUniDirectional)</PRE>
<DL>
<DD>Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.
 Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,
 is not blocked. This is contrary to the JPA specification, which states that 
 persistent relationships defined by a mapped superclass must be
 unidirectional.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>isAbstractMappingUniDirectional</CODE> - true if relationship defined in the 
        MappedSuperclass must be uni-directional<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isAbstractMappingUniDirectional()"><!-- --></A><H3>
isAbstractMappingUniDirectional</H3>
<PRE>
public boolean <B>isAbstractMappingUniDirectional</B>()</PRE>
<DL>
<DD>Whether OpenJPA allows bi-directional relationship in the MappedSuperclass.
 Prior to OpenJPA 2.0, the bi-directional relationship in the MappedSuperclass,
 is not blocked. This is contrary to the JPA specification, which states that 
 persistent relationships defined by a mapped superclass must be
 unidirectional. The default value is false.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setNonDefaultMappingAllowed(boolean)"><!-- --></A><H3>
setNonDefaultMappingAllowed</H3>
<PRE>
public void <B>setNonDefaultMappingAllowed</B>(boolean&nbsp;isNonDefaultMappingAllowed)</PRE>
<DL>
<DD>Whether OpenJPA allows non-default entity relationship mapping. 
 Prior to OpenJPA 2.0, the non-default entity relationship mapping
 is not allowed. JPA 2.0 spec relaxes this restriction. The
 default value is false.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isNonDefaultMappingAllowed()"><!-- --></A><H3>
isNonDefaultMappingAllowed</H3>
<PRE>
public boolean <B>isNonDefaultMappingAllowed</B>()</PRE>
<DL>
<DD>Whether OpenJPA allows non-default entity relationship mapping. 
 Prior to OpenJPA 2.0, the non-default entity relationship mapping
 is not allowed. JPA 2.0 spec relaxes this restriction. The
 default value is false.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getReloadOnDetach()"><!-- --></A><H3>
getReloadOnDetach</H3>
<PRE>
public boolean <B>getReloadOnDetach</B>()</PRE>
<DL>
<DD>Whether OpenJPA should attempt to load fields when the DetachState
 option is set to loaded. This also determines whether a
 redundant copy of the version field is made. Beginning in 2.0
 it defaults to false.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>the _reloadOnDetach<DT><B>Since:</B></DT>
  <DD>1.2.2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setReloadOnDetach(boolean)"><!-- --></A><H3>
setReloadOnDetach</H3>
<PRE>
public void <B>setReloadOnDetach</B>(boolean&nbsp;reloadOnDetach)</PRE>
<DL>
<DD>Whether OpenJPA should attempt to load fields when the DetachState
 option is set to loaded. This also determines whether a
 redundant copy of the version field is made. Beginning in 2.0
 it defaults to false.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>reloadOnDetach</CODE> - the _reloadOnDetach to set<DT><B>Since:</B></DT>
  <DD>1.2.2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getCheckDatabaseForCascadePersistToDetachedEntity()"><!-- --></A><H3>
getCheckDatabaseForCascadePersistToDetachedEntity</H3>
<PRE>
public boolean <B>getCheckDatabaseForCascadePersistToDetachedEntity</B>()</PRE>
<DL>
<DD>Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity. This property
 only applies for the case where we are trying to cascade a persist to an Entity which doesn't have a StateManager
 and we can't determine if it is detached.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.1.1</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setCheckDatabaseForCascadePersistToDetachedEntity(boolean)"><!-- --></A><H3>
setCheckDatabaseForCascadePersistToDetachedEntity</H3>
<PRE>
public void <B>setCheckDatabaseForCascadePersistToDetachedEntity</B>(boolean&nbsp;b)</PRE>
<DL>
<DD>Whether OpenJPA will check the database for an Entity when cascading a persist to another Entity. This property
 only applies for the case where we are trying to cascade a persist to an Entity which doesn't have a StateManager
 and we can't determine if it is detached.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.1.1</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getOverrideContextClassloader()"><!-- --></A><H3>
getOverrideContextClassloader</H3>
<PRE>
public boolean <B>getOverrideContextClassloader</B>()</PRE>
<DL>
<DD>Whether to temporally override the thread's Context Classloader when processing
 ORM XML documents to avoid deadlock potential with certain Classloader hierarchy
 configurations.  Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setOverrideContextClassloader(boolean)"><!-- --></A><H3>
setOverrideContextClassloader</H3>
<PRE>
public void <B>setOverrideContextClassloader</B>(boolean&nbsp;overrideContextClassloader)</PRE>
<DL>
<DD>Whether to temporally override the thread's Context Classloader when processing
 ORM XML documents to avoid deadlock potential with certain Classloader hierarchy
 configurations.  Defaults to false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getParseAnnotationsForQueryMode()"><!-- --></A><H3>
getParseAnnotationsForQueryMode</H3>
<PRE>
public boolean <B>getParseAnnotationsForQueryMode</B>()</PRE>
<DL>
<DD>Whether OpenJPA will scan every persistent class in an XML mapping file for annotations prior to executing a 
 query. In practice this scan is rarely needed, but the option to enable it is present for compatibility with 
 prior releases.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if the annotations should be re-parsed when resolving MetaData in MODE_QUERY.<DT><B>Since:</B></DT>
  <DD>2.0.2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setParseAnnotationsForQueryMode(boolean)"><!-- --></A><H3>
setParseAnnotationsForQueryMode</H3>
<PRE>
public void <B>setParseAnnotationsForQueryMode</B>(boolean&nbsp;parseAnnotationsForQueryMode)</PRE>
<DL>
<DD>Whether OpenJPA will scan every persistent class in an XML mapping file for annotations prior to executing a 
 query. In practice this scan is rarely needed, but the option to enable it is present for compatibility with 
 prior releases.
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.2</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getUseListAttributeForArrays()"><!-- --></A><H3>
getUseListAttributeForArrays</H3>
<PRE>
public boolean <B>getUseListAttributeForArrays</B>()</PRE>
<DL>
<DD>This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true if OpenJPA will use ListAttributes for <b>all</b> arrays, false if OpenJPA will use ListAttributes
         for <b>only</b> arrays which use the @PersistentCollection annotation.<DT><B>Since:</B></DT>
  <DD>2.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setUseListAttributeForArrays(boolean)"><!-- --></A><H3>
setUseListAttributeForArrays</H3>
<PRE>
public void <B>setUseListAttributeForArrays</B>(boolean&nbsp;useListAttribute)</PRE>
<DL>
<DD>This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>useListAttribute</CODE> - whether OpenJPA will use ListAttributes for all arrays.<DT><B>Since:</B></DT>
  <DD>2.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMetaFactoriesAreStrict()"><!-- --></A><H3>
getMetaFactoriesAreStrict</H3>
<PRE>
public boolean <B>getMetaFactoriesAreStrict</B>()</PRE>
<DL>
<DD>Whether the MetaDataFactory and MappingFactory should be set to strict mode. If strict mode is used a
 MetaDataFactory will only resolve MetaData (no JDBC mappings), and a MappingFactory will only resolve Mapping
 information.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Whether strict mode should be used.<DT><B>Since:</B></DT>
  <DD>2.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setMetaFactoriesAreStrict(boolean)"><!-- --></A><H3>
setMetaFactoriesAreStrict</H3>
<PRE>
public void <B>setMetaFactoriesAreStrict</B>(boolean&nbsp;metaFactoriesAreStrict)</PRE>
<DL>
<DD>Set whether MetaDataFactories and MappingFactories will be strictly separate.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>metaFactoriesAreStrict</CODE> - True if the MetaDataFactory should only process metadata, and the MappingFactory should only process
            mappings.<DT><B>Since:</B></DT>
  <DD>2.2.0</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="getResetFlushFlagForCascadePersist()"><!-- --></A><H3>
getResetFlushFlagForCascadePersist</H3>
<PRE>
public boolean <B>getResetFlushFlagForCascadePersist</B>()</PRE>
<DL>
<DD>Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another 
 Entity. That is, when a flush is performed, OpenJPA keep state to indicate the flush has been 
 performed.  In certain cascade persist scenarios the fact that a flush has been performed prior to 
 a cascade persist can cause certain entities to not be written to the database given the prior 
 flush.  This property, when set, will cause the flush flag to be reset in cascade scenarios. For more 
 details see JIRA OPENJPA-2051
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.x</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="setResetFlushFlagForCascadePersist(boolean)"><!-- --></A><H3>
setResetFlushFlagForCascadePersist</H3>
<PRE>
public void <B>setResetFlushFlagForCascadePersist</B>(boolean&nbsp;b)</PRE>
<DL>
<DD>Whether OpenJPA should reset the internal state (flush flag) when cascading a persist to another 
 Entity. That is, when a flush is performed, OpenJPA keep state to indicate the flush has been 
 performed.  In certain cascade persist scenarios the fact that a flush has been performed prior to 
 a cascade persist can cause certain entities to not be written to the database given the prior 
 flush.  This property, when set, will cause the flush flag to be reset in cascade scenarios. For more 
 details see JIRA OPENJPA-2051
<P>
<DD><DL>
<DT><B>Since:</B></DT>
  <DD>2.0.x</DD>
</DL>
</DD>
</DL>
<HR>

<A NAME="isSingletonLifecycleEventManager()"><!-- --></A><H3>
isSingletonLifecycleEventManager</H3>
<PRE>
public boolean <B>isSingletonLifecycleEventManager</B>()</PRE>
<DL>
<DD>Returns true if life cycle event manager is a singleton configuration.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setSingletonLifecycleEventManager(boolean)"><!-- --></A><H3>
setSingletonLifecycleEventManager</H3>
<PRE>
public void <B>setSingletonLifecycleEventManager</B>(boolean&nbsp;singleton)</PRE>
<DL>
<DD>This property set whether each EntityManager has its own life cycle event manager.
       By default, each EntityManager only fires events to the registered listeners to the entities
       it manages. If the life cycle event manager is a singleton, events will be fired to listeners
       registered to all instances of EntityManager in the same persistence unit.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getFilterPCRegistryClasses()"><!-- --></A><H3>
getFilterPCRegistryClasses</H3>
<PRE>
public boolean <B>getFilterPCRegistryClasses</B>()</PRE>
<DL>
<DD>Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setFilterPCRegistryClasses(boolean)"><!-- --></A><H3>
setFilterPCRegistryClasses</H3>
<PRE>
public void <B>setFilterPCRegistryClasses</B>(boolean&nbsp;bool)</PRE>
<DL>
<DD>Whether the metadata processor should filter classes dispatched by the PCRegistry listener system.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Compatibility.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../../org/apache/openjpa/conf/CallbackOptions.html" title="class in org.apache.openjpa.conf"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../../org/apache/openjpa/conf/DetachOptions.html" title="class in org.apache.openjpa.conf"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../../index.html?org/apache/openjpa/conf/Compatibility.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Compatibility.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>
Copyright &#169; 2006-2013 <a href="http://www.apache.org">Apache Software Foundation</a>. All Rights Reserved.
</BODY>
</HTML>
